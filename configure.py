#!/usr/bin/env python3
# Generated By: Cursor (Claude Sonnet 4)
# Interactive configuration picker for VM workstation setup

import yaml
import sys
from pathlib import Path

ANSIBLE_SITE_YML = Path("ansible/site.yml")


def discover_components():
    """Discover component names dynamically from ansible/site.yml roles/tags."""
    components = []
    if ANSIBLE_SITE_YML.exists():
        data = yaml.safe_load(ANSIBLE_SITE_YML.read_text()) or []
        if isinstance(data, list) and data:
            play = data[0] or {}
            roles = play.get("roles", []) if isinstance(play, dict) else []
            for entry in roles:
                if isinstance(entry, str):
                    components.append(entry)
                elif isinstance(entry, dict):
                    role_name = entry.get("role")
                    tag = entry.get("tags")
                    if isinstance(role_name, str) and role_name:
                        components.append(role_name)
                    elif isinstance(tag, str) and tag:
                        components.append(tag)
    # De-duplicate preserving order
    seen = set()
    deduped = []
    for comp in components:
        if comp not in seen:
            seen.add(comp)
            deduped.append(comp)
    return deduped


def get_role_description(role_name: str) -> str:
    """Derive a human-friendly description for a role dynamically.

    Priority:
    1) roles/<role>/meta/main.yml -> galaxy_info.description
    2) First descriptive comment line in roles/<role>/tasks/main.yml (excluding generator banner)
    3) Fallback to role name
    """
    role_dir = Path("ansible/roles") / role_name

    # 1) meta/main.yml description
    meta_file = role_dir / "meta" / "main.yml"
    if meta_file.exists():
        try:
            meta = yaml.safe_load(meta_file.read_text()) or {}
            galaxy_info = meta.get("galaxy_info", {}) if isinstance(meta, dict) else {}
            descr = galaxy_info.get("description")
            if isinstance(descr, str) and descr.strip():
                return descr.strip()
        except Exception:
            pass

    # 2) First meaningful comment in tasks/main.yml
    tasks_file = role_dir / "tasks" / "main.yml"
    if tasks_file.exists():
        try:
            for line in tasks_file.read_text().splitlines():
                stripped = line.strip()
                if stripped.startswith("# "):
                    text = stripped[2:].strip()
                    if text and "Generated By:" not in text:
                        return text
        except Exception:
            pass

    # 3) Fallback
    return role_name


def load_config():
    """Load configuration from config.yml, or return an empty selection map.

    No pre-generated defaults: user must choose components interactively.
    """
    config_file = Path("config.yml")
    if not config_file.exists():
        return {}
    with open(config_file, "r") as f:
        user_config = yaml.safe_load(f) or {}
    # Only keep boolean selections; ignore any legacy keys
    return {k: bool(v) for k, v in user_config.items() if isinstance(v, (bool, int))}


def save_config(config):
    """Save configuration to config.yml"""
    with open("config.yml", "w") as f:
        yaml.dump(config, f, default_flow_style=False, sort_keys=False)


def display_menu(config):
    """Display the component selection menu"""
    print("\n" + "=" * 60)
    print("VM Workstation Configuration")
    print("=" * 60)
    print()

    components = discover_components()
    max_name_len = max((len(c) for c in components), default=0)
    for component in components:
        enabled = bool(config.get(component, False))
        status = "✅ ENABLED" if enabled else "❌ DISABLED"
        description = get_role_description(component)
        print(f"{component.ljust(max_name_len)}  [{status:12}] - {description}")

    print("\n" + "=" * 60)


def interactive_picker(config):
    """Interactive component picker using InquirerPy checkbox UI"""
    try:
        from InquirerPy import inquirer
    except Exception:
        print("InquirerPy is required for interactive selection. Run: make dev-deps", file=sys.stderr)
        raise

    components = discover_components()
    max_name_len = max((len(c) for c in components), default=0)

    # Preselect using per-choice "enabled" (robust across library versions)
    choices = [
        {
            "name": f"{component.ljust(max_name_len)}  - {get_role_description(component)}",
            "value": component,
            "enabled": bool(config.get(component, False)),
        }
        for component in components
    ]

    selected = inquirer.checkbox(
        message="Select components (space to toggle, enter to confirm):",
        choices=choices,
        instruction="↑/↓ to move, space to select, type to filter",
        cycle=True,
        height=10,
        enabled_symbol="✅",
        disabled_symbol="❌",
    ).execute()

    return {component: (component in selected) for component in components}


def main():
    """Main configuration function"""
    config = load_config()

    if len(sys.argv) > 1 and sys.argv[1] == "--show":
        display_menu(config)
        return

    print("VM Workstation Configuration Tool")
    print("This tool helps you select which components to install.")
    print()

    # Run interactive picker
    selections = interactive_picker(config)

    # Build and save a minimal config with only boolean selections
    minimal = {component: bool(enabled) for component, enabled in selections.items()}
    save_config(minimal)

    print("\n✅ Configuration saved!")
    print("\nSelected components:")
    for component, enabled in selections.items():
        status = "✅" if enabled else "❌"
        print(f"  {status} {component}")

    print("\nTo run the setup with these selections:")
    print("  make run")


if __name__ == "__main__":
    main() 