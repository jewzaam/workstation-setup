#!/usr/bin/env python3
# Generated By: Cursor (Claude Sonnet 4)
# Interactive configuration picker for VM workstation setup

import yaml
import os
import sys
import subprocess
from pathlib import Path

def create_default_config():
    """Create default configuration file"""
    default_config = {
        'packages': True,
        'files': True,
        'system_config': True,
        'ssh': False,
        'nomachine': False,
        'component_descriptions': {
            'packages': 'Install development packages (Python, Go, Git, Cursor, etc.)',
            'files': 'Deploy configuration files (.bashrc, .vimrc, .screenrc, etc.)',
            'system_config': 'Configure GNOME for remote access performance',
            'ssh': 'Install and configure SSH server for remote access',
            'nomachine': 'Install NoMachine for graphical remote desktop access'
        },
        'default_selections': ['packages', 'files', 'system_config']
    }
    return default_config

def load_config():
    """Load configuration from config.yml, create if doesn't exist"""
    config_file = Path("config.yml")
    if not config_file.exists():
        print("üìù Creating default config.yml...")
        config = create_default_config()
        save_config(config)
        return config
    
    with open(config_file, 'r') as f:
        return yaml.safe_load(f)

def save_config(config):
    """Save configuration to config.yml"""
    with open("config.yml", 'w') as f:
        yaml.dump(config, f, default_flow_style=False, sort_keys=False)

def get_enabled_tags(config):
    """Get list of enabled tags based on configuration"""
    enabled_tags = []
    tag_mapping = {
        'packages': 'packages',
        'files': 'files', 
        'system_config': 'system-config',
        'ssh': 'ssh',
        'nomachine': 'nomachine'
    }
    
    for component, enabled in config.items():
        if component in tag_mapping and enabled:
            enabled_tags.append(tag_mapping[component])
    
    return enabled_tags

def display_menu(config):
    """Display the component selection menu"""
    print("\n" + "="*60)
    print("VM Workstation Configuration")
    print("="*60)
    print()
    
    descriptions = config.get('component_descriptions', {})
    
    for component, enabled in config.items():
        if component in ['component_descriptions', 'default_selections']:
            continue
        
        status = "‚úÖ ENABLED" if enabled else "‚ùå DISABLED"
        description = descriptions.get(component, component)
        print(f"{component:15} [{status:12}] - {description}")
    
    print("\n" + "="*60)

def interactive_picker(config):
    """Run interactive component picker"""
    components = [k for k in config.keys() if k not in ['component_descriptions', 'default_selections']]
    descriptions = config.get('component_descriptions', {})
    
    print("\nSelect components to install:")
    print("(Use number to toggle, a=all, n=none, d=defaults, s=save, q=quit)")
    print()
    
    # Create selection list
    selections = {}
    for component in components:
        selections[component] = config.get(component, False)
    
    while True:
        # Clear screen (simple approach)
        os.system('clear' if os.name == 'posix' else 'cls')
        
        print("\n" + "="*60)
        print("VM Workstation Component Selection")
        print("="*60)
        print()
        
        for i, component in enumerate(components, 1):
            status = "‚úÖ" if selections[component] else "‚ùå"
            description = descriptions.get(component, component)
            print(f"{i:2}. {status} {component:15} - {description}")
        
        print()
        print("Commands:")
        print("  [1-{}] Toggle component".format(len(components)))
        print("  [a] Select all")
        print("  [n] Select none")
        print("  [d] Use defaults")
        print("  [s] Save and exit")
        print("  [q] Quit without saving")
        print()
        
        choice = input("Enter choice: ").strip().lower()
        
        if choice == 'q':
            print("Configuration cancelled.")
            return None
        elif choice == 's':
            return selections
        elif choice == 'a':
            for component in components:
                selections[component] = True
        elif choice == 'n':
            for component in components:
                selections[component] = False
        elif choice == 'd':
            defaults = config.get('default_selections', ['packages', 'files', 'system_config'])
            for component in components:
                selections[component] = component in defaults
        elif choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(components):
                component = components[idx]
                selections[component] = not selections[component]

def main():
    """Main configuration function"""
    config = load_config()
    
    if len(sys.argv) > 1 and sys.argv[1] == '--show':
        display_menu(config)
        return
    
    print("VM Workstation Configuration Tool")
    print("This tool helps you select which components to install.")
    print()
    
    # Run interactive picker
    selections = interactive_picker(config)
    
    if selections is None:
        return
    
    # Update config with selections
    for component, enabled in selections.items():
        config[component] = enabled
    
    # Save configuration
    save_config(config)
    
    # Get enabled tags
    enabled_tags = get_enabled_tags(config)
    
    print("\n‚úÖ Configuration saved!")
    print("\nSelected components:")
    for component, enabled in selections.items():
        status = "‚úÖ" if enabled else "‚ùå"
        print(f"  {status} {component}")
    
    print("\nTo run the setup with these selections:")
    if enabled_tags:
        print("  make run TAGS={}".format(','.join(enabled_tags)))
    else:
        print("  make run")
    
    print("\nOr run individual components:")
    for component, enabled in selections.items():
        if enabled:
            tag = component.replace('_', '-')
            print("  make run-{}".format(tag))

if __name__ == "__main__":
    main() 