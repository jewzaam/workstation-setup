#!/usr/bin/env python3
# Generated By: Cursor (Claude Sonnet 4)
# Interactive configuration picker for VM workstation setup

import yaml
import sys
from pathlib import Path

def create_default_config():
    """Create default configuration file"""
    default_config = {
        'packages': True,
        'files': True,
        'system_config': True,
        'git': True,
        'ssh': False,
        'nomachine': False,
        'component_descriptions': {
            'packages': 'Install development packages (Python, Go, Git, Cursor, etc.)',
            'files': 'Deploy configuration files (.bashrc, .vimrc, .screenrc, etc.)',
            'git': 'Configure Git (aliases, colors, difftool, etc.)',
            'system_config': 'Configure GNOME for remote access performance',
            'ssh': 'Install and configure SSH server for remote access',
            'nomachine': 'Install NoMachine for graphical remote desktop access'
        },
        'default_selections': ['packages', 'files', 'system_config', 'git']
    }
    return default_config

def load_config():
    """Load configuration from config.yml, create if missing"""
    config_file = Path("config.yml")

    if not config_file.exists():
        print("üìù Creating default config.yml...")
        defaults = create_default_config()
        save_config(defaults)
        return defaults

    with open(config_file, 'r') as f:
        user_config = yaml.safe_load(f) or {}

    return user_config

def save_config(config):
    """Save configuration to config.yml"""
    with open("config.yml", 'w') as f:
        yaml.dump(config, f, default_flow_style=False, sort_keys=False)

def display_menu(config):
    """Display the component selection menu"""
    print("\n" + "="*60)
    print("VM Workstation Configuration")
    print("="*60)
    print()
    
    descriptions = config.get('component_descriptions', {})
    
    for component, enabled in config.items():
        if component in ['component_descriptions', 'default_selections']:
            continue
        
        status = "‚úÖ ENABLED" if enabled else "‚ùå DISABLED"
        description = descriptions.get(component, component)
        print(f"{component:15} [{status:12}] - {description}")
    
    print("\n" + "="*60)

def interactive_picker(config):
    """Interactive component picker using InquirerPy checkbox UI"""
    try:
        from InquirerPy import inquirer
    except Exception:
        print("InquirerPy is required for interactive selection. Run: make dev-deps", file=sys.stderr)
        raise

    components = [k for k in config.keys() if k not in ['component_descriptions', 'default_selections']]
    descriptions = config.get('component_descriptions', {})

    # Preselect using per-choice "enabled" (robust across library versions)
    choices = [
        {
            "name": f"{component} - {descriptions.get(component, component)}",
            "value": component,
            "enabled": bool(config.get(component, False)),
        }
        for component in components
    ]

    selected = inquirer.checkbox(
        message="Select components (space to toggle, enter to confirm):",
        choices=choices,
        instruction="‚Üë/‚Üì to move, space to select, type to filter",
        cycle=True,
        height=10,
        enabled_symbol="‚úÖ",
        disabled_symbol="‚ùå",
    ).execute()

    return {component: (component in selected) for component in components}

def main():
    """Main configuration function"""
    config = load_config()
    
    if len(sys.argv) > 1 and sys.argv[1] == '--show':
        display_menu(config)
        return
    
    print("VM Workstation Configuration Tool")
    print("This tool helps you select which components to install.")
    print()
    
    # Run interactive picker
    selections = interactive_picker(config)
    
    # Update config with selections
    for component, enabled in selections.items():
        config[component] = enabled
    
    # Save configuration
    save_config(config)
    
    print("\n‚úÖ Configuration saved!")
    print("\nSelected components:")
    for component, enabled in selections.items():
        status = "‚úÖ" if enabled else "‚ùå"
        print(f"  {status} {component}")
    
    print("\nTo run the setup with these selections:")
    print("  make run")
    
if __name__ == "__main__":
    main() 