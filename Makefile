# Generated By: Cursor (Claude Sonnet 4)
# Makefile for VM Workstation Setup Ansible Playbook

.DEFAULT_GOAL := help
.PHONY: help dev-deps collections lint syntax run dry-run clean check-deps run-packages run-dotfiles run-system-config configure show-config info version

# Variables
ANSIBLE_DIR := ansible
PLAYBOOK := $(ANSIBLE_DIR)/site.yml
INVENTORY := localhost,
CONNECTION := local
TAGS ?= 
LIMIT ?=

# Python virtual environment
VENV_DIR ?= .venv
PYTHON := $(VENV_DIR)/bin/python
PIP := $(VENV_DIR)/bin/pip
ANSIBLE := $(VENV_DIR)/bin/ansible
ANSIBLE_PLAYBOOK := $(VENV_DIR)/bin/ansible-playbook
ANSIBLE_GALAXY := $(VENV_DIR)/bin/ansible-galaxy
ANSIBLE_LINT := $(VENV_DIR)/bin/ansible-lint

# Absolute paths for tools when changing directories during recipes
ABS_ANSIBLE := $(CURDIR)/$(ANSIBLE)
ABS_ANSIBLE_PLAYBOOK := $(CURDIR)/$(ANSIBLE_PLAYBOOK)
ABS_ANSIBLE_GALAXY := $(CURDIR)/$(ANSIBLE_GALAXY)
ABS_ANSIBLE_LINT := $(CURDIR)/$(ANSIBLE_LINT)

# Collections directory and environment for reproducible installs
COLLECTIONS_DIR := $(CURDIR)/collections
ANSIBLE_ENV := ANSIBLE_CONFIG=$(CURDIR)/$(ANSIBLE_DIR)/ansible.cfg ANSIBLE_COLLECTIONS_PATH=$(COLLECTIONS_DIR)

help: ## Display this help message
	@echo "VM Workstation Setup - Ansible Playbook"
	@echo "========================================"
	@echo ""
	@echo "Available targets:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

configure: dev-deps ## Interactive configuration picker
	@echo "Running configuration picker..."
	@$(PYTHON) configure.py

show-config: dev-deps ## Show current configuration
	@echo "Current configuration:"
	@$(PYTHON) configure.py --show

run-config: dev-deps ## Run setup with current configuration
	@echo "Running setup with current configuration..."
	@$(PYTHON) -c "import yaml; config=yaml.safe_load(open('config.yml')); tags=[k.replace('_', '-') for k,v in config.items() if v and k not in ['component_descriptions', 'default_selections']]; print('make run TAGS=' + ','.join(tags) if tags else 'make run')" | bash

dev-deps: ## Install development/test dependencies (e.g., ansible-lint) in venv
	@echo "Setting up Python virtual environment at $(VENV_DIR)..."
	@command -v python3 >/dev/null 2>&1 || { \
		echo "❌ python3 not found. Please install: sudo dnf install python3"; \
		exit 1; \
	}
	@test -d $(VENV_DIR) || python3 -m venv $(VENV_DIR)
	@$(PIP) install --upgrade pip >/dev/null
	@echo "Installing development/test dependencies..."
	@$(PIP) install -r requirements-dev.txt
	@echo "✅ Dev/test dependencies installed in $(VENV_DIR)"

lint: dev-deps ## Run ansible-lint validation
	@echo "Running ansible-lint validation..."
	@echo "Installing collections locally..."
	@$(ANSIBLE_ENV) $(ANSIBLE_GALAXY) collection install -r $(ANSIBLE_DIR)/requirements.yml -p $(COLLECTIONS_DIR)
	@echo "Debug: Files to be scanned:"
	@cd $(ANSIBLE_DIR) && find . -name "*.yml" -o -name "*.yaml" | grep -v gpg/ | head -10
	@echo "Running ansible-lint (matching CI behavior)..."
	@cd $(ANSIBLE_DIR) && $(ANSIBLE_ENV) $(ABS_ANSIBLE_LINT)
	@echo "✅ Lint validation passed"

collections: dev-deps ## Install required Ansible collections locally
	@echo "Installing required Ansible collections to $(COLLECTIONS_DIR)..."
	@$(ANSIBLE_ENV) $(ANSIBLE_GALAXY) collection install -r $(ANSIBLE_DIR)/requirements.yml -p $(COLLECTIONS_DIR)
	@echo "✅ Collections installed"

syntax: dev-deps collections ## Validate playbook syntax
	@echo "Checking playbook syntax..."
	@$(ABS_ANSIBLE_LINT) --version >/dev/null || true
	@$(ANSIBLE_ENV) $(ABS_ANSIBLE_PLAYBOOK) --syntax-check -i $(INVENTORY) -c $(CONNECTION) $(PLAYBOOK)
	@echo "✅ Syntax validation passed"

dry-run: check-deps collections ## Run playbook in check mode (dry-run)
	@echo "Running playbook in check mode (dry-run)..."
	@$(ANSIBLE_ENV) $(ABS_ANSIBLE_PLAYBOOK) --check -i $(INVENTORY) -c $(CONNECTION) $(PLAYBOOK) \
		--ask-become-pass \
		$(if $(TAGS),--tags $(TAGS),) \
		$(if $(LIMIT),--limit $(LIMIT),)
	@echo "✅ Dry-run completed"

run: syntax collections ## Complete VM setup (uses current configuration)
	@echo "Running VM workstation setup with current configuration..."
	@$(ANSIBLE_ENV) $(ABS_ANSIBLE_PLAYBOOK) -i $(INVENTORY) -c $(CONNECTION) $(PLAYBOOK) \
		--ask-become-pass \
		$(if $(TAGS),--tags $(TAGS),) \
		$(if $(LIMIT),--limit $(LIMIT),)

run-packages: ## Install packages only
	@$(MAKE) run TAGS=packages

run-dotfiles: collections ## Deploy configuration files only  
	@echo "Deploying files..."
	@$(ANSIBLE_ENV) $(ABS_ANSIBLE_PLAYBOOK) -i $(INVENTORY) -c $(CONNECTION) $(PLAYBOOK) --tags files

run-system-config: collections ## Apply system settings only
	@echo "Applying system configuration..."
	@$(ANSIBLE_ENV) $(ABS_ANSIBLE_PLAYBOOK) -i $(INVENTORY) -c $(CONNECTION) $(PLAYBOOK) --tags system-config

run-ssh: collections ## Install and configure SSH server
	@echo "Installing and configuring SSH..."
	@$(ANSIBLE_ENV) $(ABS_ANSIBLE_PLAYBOOK) -i $(INVENTORY) -c $(CONNECTION) $(PLAYBOOK) --tags ssh --ask-become-pass

run-nomachine: collections ## Install NoMachine for remote desktop
	@echo "Installing NoMachine..."
	@$(ANSIBLE_ENV) $(ABS_ANSIBLE_PLAYBOOK) -i $(INVENTORY) -c $(CONNECTION) $(PLAYBOOK) --tags nomachine --ask-become-pass

check-deps: ## Verify all prerequisites are met
	@echo "Checking for required dependencies..."
	@command -v ansible >/dev/null 2>&1 || { \
		echo "❌ ansible not found. Please install: sudo dnf install ansible"; \
		exit 1; \
	}
	@[ -x $(ANSIBLE_LINT) ] || { \
		echo "❌ ansible-lint not found in venv. Please run: make dev-deps"; \
		exit 1; \
	}
	@command -v python3 >/dev/null 2>&1 || { \
		echo "❌ python3 not found. Please install: sudo dnf install python3"; \
		exit 1; \
	}
	@$(PYTHON) -c "import yaml" 2>/dev/null || { \
		echo "❌ PyYAML not available in venv. Ensure dev-deps installed: make dev-deps"; \
		exit 1; \
	}
	@echo "✅ All dependencies found"
	@echo "Checking system readiness..."
	@$(ANSIBLE_ENV) $(ABS_ANSIBLE_PLAYBOOK) --syntax-check -i $(INVENTORY) -c $(CONNECTION) $(PLAYBOOK) >/dev/null 2>&1 || { \
		echo "❌ Playbook syntax check failed"; \
		exit 1; \
	}
	@echo "✅ System ready for workstation setup"

info: ## Show playbook details
	@echo "Playbook Information:"
	@echo "===================="
	@echo "Playbook: $(PLAYBOOK)"
	@echo "Inventory: $(INVENTORY)"
	@echo "Connection: $(CONNECTION)"
	@echo ""
	@echo "Available tags:"
	@cd $(ANSIBLE_DIR) && grep -h "tags:" roles/*/tasks/main.yml site.yml | sort -u || echo "  (no specific tags found)"
	@echo ""
	@echo "Roles:"
	@cd $(ANSIBLE_DIR) && ls -1 roles/ | sed 's/^/  - /'

clean: ## Remove temporary and backup files
	@echo "Cleaning temporary files..."
	# Python caches
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	# Ansible retry/logs and ansible temp dirs
	@find . -name "*.retry" -delete 2>/dev/null || true
	@rm -f $(ANSIBLE_DIR)/ansible.log 2>/dev/null || true
	@rm -rf .ansible 2>/dev/null || true
	# Local collections cache
	@rm -rf collections 2>/dev/null || true
	# Python virtual environment
	@rm -rf $(VENV_DIR) 2>/dev/null || true
	# Misc ignored artifacts
	@rm -rf dist build *.egg-info/ docs/_build site .pytest_cache .coverage htmlcov .tox local scratch logs 2>/dev/null || true
	@echo "✅ Cleanup completed"

version: ## Display Ansible version
	@ansible --version
	@echo ""
	@$(ANSIBLE_LINT) --version 2>/dev/null || echo "ansible-lint not installed in venv ($(VENV_DIR))"