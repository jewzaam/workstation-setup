# Generated By: Cursor (Claude Sonnet 4)
# Makefile for VM Workstation Setup Ansible Playbook

.DEFAULT_GOAL := help
.PHONY: help lint syntax run dry-run clean check-deps run-packages run-dotfiles run-system-config info version

# Variables
ANSIBLE_DIR := ansible
PLAYBOOK := $(ANSIBLE_DIR)/site.yml
INVENTORY := localhost,
CONNECTION := local
TAGS ?= 
LIMIT ?=

help: ## Display this help message
	@echo "VM Workstation Setup - Ansible Playbook"
	@echo "========================================"
	@echo ""
	@echo "Available targets:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

lint: ## Run ansible-lint validation
	@echo "Running ansible-lint validation..."
	@cd $(ANSIBLE_DIR) && ansible-lint site.yml
	@echo "✓ Lint validation passed"

syntax: ## Validate playbook syntax
	@echo "Checking playbook syntax..."
	@cd $(ANSIBLE_DIR) && ansible-playbook --syntax-check -i $(INVENTORY) -c $(CONNECTION) site.yml
	@echo "✓ Syntax validation passed"

dry-run: check-deps ## Run playbook in check mode (dry-run)
	@echo "Running playbook in check mode (dry-run)..."
	@cd $(ANSIBLE_DIR) && ansible-playbook --check -i $(INVENTORY) -c $(CONNECTION) site.yml \
		--ask-become-pass \
		$(if $(TAGS),--tags $(TAGS),) \
		$(if $(LIMIT),--limit $(LIMIT),)
	@echo "✓ Dry-run completed"

run: syntax ## Complete VM setup
	@echo "Running VM workstation setup..."
	@cd $(ANSIBLE_DIR) && ansible-playbook -i $(INVENTORY) -c $(CONNECTION) site.yml \
		--ask-become-pass \
		$(if $(TAGS),--tags $(TAGS),) \
		$(if $(LIMIT),--limit $(LIMIT),)

run-packages: ## Install packages only
	@$(MAKE) run TAGS=packages

run-dotfiles: ## Deploy configuration files only  
	@echo "Deploying dotfiles..."
	@cd $(ANSIBLE_DIR) && ansible-playbook -i $(INVENTORY) -c $(CONNECTION) site.yml --tags dotfiles

run-system-config: ## Apply system settings only
	@echo "Applying system configuration..."
	@cd $(ANSIBLE_DIR) && ansible-playbook -i $(INVENTORY) -c $(CONNECTION) site.yml --tags system-config

check-deps: ## Verify all prerequisites are met
	@echo "Checking for required dependencies..."
	@command -v ansible >/dev/null 2>&1 || { \
		echo "❌ ansible not found. Please install: sudo dnf install ansible"; \
		exit 1; \
	}
	@command -v ansible-lint >/dev/null 2>&1 || { \
		echo "❌ ansible-lint not found. Please install: sudo dnf install ansible-lint"; \
		exit 1; \
	}
	@echo "✓ All dependencies found"
	@echo "Checking system readiness..."
	@cd $(ANSIBLE_DIR) && ansible-playbook --syntax-check -i $(INVENTORY) -c $(CONNECTION) site.yml >/dev/null 2>&1 || { \
		echo "❌ Playbook syntax check failed"; \
		exit 1; \
	}
	@echo "✓ System ready for workstation setup"

info: ## Show playbook details
	@echo "Playbook Information:"
	@echo "===================="
	@echo "Playbook: $(PLAYBOOK)"
	@echo "Inventory: $(INVENTORY)"
	@echo "Connection: $(CONNECTION)"
	@echo ""
	@echo "Available tags:"
	@cd $(ANSIBLE_DIR) && grep -h "tags:" roles/*/tasks/main.yml site.yml | sort -u || echo "  (no specific tags found)"
	@echo ""
	@echo "Roles:"
	@cd $(ANSIBLE_DIR) && ls -1 roles/ | sed 's/^/  - /'

clean: ## Remove temporary and backup files
	@echo "Cleaning temporary files..."
	@find $(ANSIBLE_DIR) -name "*.retry" -delete 2>/dev/null || true
	@find $(ANSIBLE_DIR) -name "*.pyc" -delete 2>/dev/null || true  
	@find $(ANSIBLE_DIR) -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@echo "✓ Cleanup completed"

version: ## Display Ansible version
	@ansible --version
	@echo ""
	@ansible-lint --version 2>/dev/null || echo "ansible-lint not installed" 