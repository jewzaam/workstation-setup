---
# Generated By: Cursor (Claude Sonnet 4)
# Dotfiles deployment tasks

- name: Deploy dotfiles to user home directory
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ user_home }}/{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    backup: true
  loop: "{{ dotfiles }}"
  register: dotfiles_deployed

- name: Create backup directory info
  ansible.builtin.debug:
    msg: |
      Dotfiles deployed successfully!
      Original files backed up with .ansible-backup~ extension
      Files deployed:
      {% for file in dotfiles %}
      - {{ file.dest }}
      {% endfor %}

      Bashrc.d modular configuration deployed:
      {% for file in bashrc_d_files %}
      - {{ bashrc_d_dir }}/{{ file.dest }}
      {% endfor %}

- name: Create bashrc.d directory
  ansible.builtin.file:
    path: "{{ user_home }}/{{ bashrc_d_dir }}"
    state: directory
    mode: "0755"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"

- name: Deploy bashrc.d modular configuration files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ user_home }}/{{ bashrc_d_dir }}/{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    backup: true
    force: "{{ not item.user_managed }}"
  loop: "{{ bashrc_d_files }}"
  register: bashrc_d_deployed

- name: Verify bashrc.d sourcing
  ansible.builtin.lineinfile:
    path: "{{ user_home }}/.bashrc"
    line: "if [ -d ~/{{ bashrc_d_dir }} ]; then"
    state: present
  check_mode: true
  register: bashrc_d_check

- name: Confirm bashrc.d sourcing
  ansible.builtin.debug:
    msg: "✓ .bashrc correctly sources {{ bashrc_d_dir }} directory"
  when: not bashrc_d_check.changed

- name: Configure git settings (preserves existing user config)
  community.general.git_config:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    scope: global
  loop: "{{ git_config }}"

- name: Create .screenrc.d directory
  ansible.builtin.file:
    path: "{{ user_home }}/.screenrc.d"
    state: directory
    mode: "0755"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"

- name: Deploy base screenrc configuration (ansible-managed)
  ansible.builtin.copy:
    src: screenrc.d/base
    dest: "{{ user_home }}/.screenrc.d/base"
    mode: "0644"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    backup: true

- name: Deploy user screenrc example (only if user config doesn't exist)
  ansible.builtin.copy:
    src: screenrc.d/user.example
    dest: "{{ user_home }}/.screenrc.d/user"
    mode: "0644"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    force: false

- name: Create main .screenrc that sources both configs
  ansible.builtin.copy:
    content: |
      # Generated By: Cursor (Claude Sonnet 4)
      # Main screenrc - sources both base (ansible-managed) and user configs
      # User-specific customizations should go in ~/.screenrc.d/user

      # Source user-specific config first (if it exists)
      source $HOME/.screenrc.d/user

      # Source base configuration (ansible-managed)
      source $HOME/.screenrc.d/base
    dest: "{{ user_home }}/.screenrc"
    mode: "0644"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    backup: true

- name: Verify git configuration was applied
  ansible.builtin.shell: |
    set -o pipefail
    git config --global --get diff.tool || echo "not_set"
  register: git_diff_tool_check
  changed_when: false
  failed_when: false

- name: Confirm git configuration setup
  ansible.builtin.debug:
    msg: "✓ Git correctly configured with diff tool: {{ git_diff_tool_check.stdout }}"
  when: git_diff_tool_check.rc == 0

- name: Set ownership on all dotfiles
  ansible.builtin.file:
    path: "{{ user_home }}/{{ item.dest }}"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
  loop: "{{ dotfiles }}"

- name: Set ownership on all bashrc.d files
  ansible.builtin.file:
    path: "{{ user_home }}/{{ bashrc_d_dir }}/{{ item.dest }}"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
  loop: "{{ bashrc_d_files }}"

- name: Validate deployed files exist
  ansible.builtin.stat:
    path: "{{ user_home }}/{{ item.dest }}"
  loop: "{{ dotfiles }}"
  register: dotfile_validation

- name: Validate bashrc.d configuration files exist
  ansible.builtin.stat:
    path: "{{ user_home }}/{{ bashrc_d_dir }}/{{ item.dest }}"
  loop: "{{ bashrc_d_files }}"
  register: bashrc_d_validation

- name: Validate screen configuration files exist
  ansible.builtin.stat:
    path: "{{ user_home }}/{{ item }}"
  loop:
    - .screenrc
    - .screenrc.d/base
    - .screenrc.d/user
  register: screen_validation

- name: Report deployment status
  ansible.builtin.debug:
    msg: |
      Dotfiles deployment summary:
      {% for result in dotfile_validation.results %}
      - {{ result.item.dest }}: {{ 'EXISTS' if result.stat.exists else 'MISSING' }}
      {% endfor %}

      Bashrc.d modular configuration:
      {% for result in bashrc_d_validation.results %}
      - {{ bashrc_d_dir }}/{{ result.item.dest }}: {{ 'EXISTS' if result.stat.exists else 'MISSING' }}
      {% endfor %}

      Screen configuration:
      {% for result in screen_validation.results %}
      - {{ result.item }}: {{ 'EXISTS' if result.stat.exists else 'MISSING' }}
      {% endfor %}

      Git configuration: CONFIGURED via git_config module (preserves user settings)
