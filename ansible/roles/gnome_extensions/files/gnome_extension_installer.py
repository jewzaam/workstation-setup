#!/usr/bin/env python3
# Generated By: Cursor (GPT-5)

import argparse
import json
import os
import shutil
import subprocess
import sys
import urllib.request
from pathlib import Path


BASE_URL = "https://extensions.gnome.org"


def run_cmd(args: list[str]) -> tuple[int, str, str]:
    try:
        proc = subprocess.run(args, check=False, capture_output=True, text=True)
        return proc.returncode, proc.stdout.strip(), proc.stderr.strip()
    except Exception as exc:
        return 1, "", str(exc)


def detect_shell_major() -> str:
    # Prefer gnome-extensions, fallback to gnome-shell
    rc, out, _ = run_cmd(["gnome-extensions", "--version"])  # e.g., "48"
    if rc == 0 and out:
        parts = out.strip().split(".")
        if parts and parts[0].isdigit():
            return parts[0]
    rc, out, _ = run_cmd(["gnome-shell", "--version"])  # e.g., "GNOME Shell 48.0"
    if rc == 0 and out:
        toks = out.strip().split()
        if toks:
            for tok in toks:
                if tok[0].isdigit():
                    return tok.split(".")[0]
    # Fallback
    return "48"


def fetch_json(url: str) -> dict:
    req = urllib.request.Request(url, headers={"User-Agent": "curl/7"})
    with urllib.request.urlopen(req) as resp:
        data = resp.read()
        return json.loads(data.decode("utf-8"))


def resolve_by_id(pk: int, shell_major: str) -> tuple[str, str]:
    info_url = f"{BASE_URL}/extension-info/?pk={pk}&shell_version={shell_major}"
    data = fetch_json(info_url)
    uuid = data.get("uuid", "")
    rel = data.get("download_url", "")
    if not uuid or not rel:
        raise RuntimeError(f"Failed to resolve extension info for pk={pk}, shell={shell_major}")
    return uuid, BASE_URL + rel


def resolve_by_uuid(uuid: str, shell_major: str) -> tuple[str, str]:
    # Find pk via search, then reuse resolve_by_id
    q_url = f"{BASE_URL}/extension-query/?page=1&shell_version={shell_major}&search={urllib.parse.quote(uuid)}"
    data = fetch_json(q_url)
    for ext in data.get("extensions", []):
        if ext.get("uuid") == uuid:
            pk = ext.get("pk")
            if pk is None:
                break
            return resolve_by_id(int(pk), shell_major)
    raise RuntimeError(f"Could not resolve uuid={uuid} for shell={shell_major}")


def ensure_gext_cli() -> None:
    if shutil.which("gnome-extensions") is None:
        raise RuntimeError("gnome-extensions CLI not found in PATH")


def is_installed(uuid: str) -> bool:
    meta = Path.home() / ".local/share/gnome-shell/extensions" / uuid / "metadata.json"
    return meta.exists()


def download(url: str, dest: Path) -> None:
    dest.parent.mkdir(parents=True, exist_ok=True)
    req = urllib.request.Request(url, headers={"User-Agent": "curl/7"})
    with urllib.request.urlopen(req) as resp, open(dest, "wb") as f:
        f.write(resp.read())


def install_zip(zip_path: Path) -> int:
    rc, out, err = run_cmd(["gnome-extensions", "install", str(zip_path)])
    if rc != 0 and "already installed" in (out + err).lower():
        return 0
    return rc


def enable_uuid(uuid: str) -> int:
    rc, _, _ = run_cmd(["gnome-extensions", "enable", uuid])
    return rc


def parse_bool(val: str) -> bool:
    return str(val).strip().lower() in {"1", "true", "yes", "on"}


def main() -> int:
    parser = argparse.ArgumentParser(description="Install a GNOME extension by id/pk")
    parser.add_argument("--id", "--pk", dest="pk", type=int, help="Extension id/pk from extensions.gnome.org", required=True)
    parser.add_argument("--enable-after-install", dest="enable_after", type=parse_bool, default=False)
    parser.add_argument("--shell-major", dest="shell_major", type=str, help="Override GNOME Shell major version")
    args = parser.parse_args()

    try:
        ensure_gext_cli()
        shell_major = args.shell_major or detect_shell_major()

        resolved_uuid, download_url = resolve_by_id(args.pk, shell_major)

        installed_already = is_installed(resolved_uuid)
        installed_now = False

        if not installed_already:
            zip_path = Path("/tmp") / f"{resolved_uuid}.zip"
            download(download_url, zip_path)
            rc = install_zip(zip_path)
            if rc != 0:
                raise RuntimeError(f"gnome-extensions install failed with rc={rc}")
            installed_now = True

        if args.enable_after and installed_now:
            enable_uuid(resolved_uuid)

        result = {
            "uuid": resolved_uuid,
            "download_url": download_url,
            "shell_major": shell_major,
            "already_installed": installed_already,
            "installed_now": installed_now,
            "enabled": bool(args.enable_after and installed_now),
        }
        print(json.dumps(result))
        return 0
    except Exception as exc:
        print(json.dumps({"error": str(exc)}))
        return 1


if __name__ == "__main__":
    sys.exit(main())

