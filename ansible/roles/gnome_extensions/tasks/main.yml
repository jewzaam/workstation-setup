---
# Install GNOME Shell extensions for the current user by downloading zips
# from extensions.gnome.org and installing via gnome-extensions CLI.
#
# Behavior:
# - Resolves UUID and download_url via the public API using the Shell major version
# - Downloads to /tmp and installs using `gnome-extensions install <zip>`
# - Does NOT enable or restart the shell by default (Wayland requires re-login)

- name: Ensure Python installer script directory is present
  ansible.builtin.file:
    dest: "{{ ansible_env.HOME }}/.local/bin"
    mode: "0755"
    state: directory

- name: Ensure Python installer script is present
  ansible.builtin.copy:
    src: gnome_extension_installer.py
    dest: "{{ ansible_env.HOME }}/.local/bin/gnome_extension_installer.py"
    mode: "0755"

- name: Initialize outcomes
  ansible.builtin.set_fact:
    gnome_extensions_install_outcomes: []

- name: Install extensions by id/pk
  ansible.builtin.command:
    argv:
      - "{{ ansible_env.HOME }}/.local/bin/gnome_extension_installer.py"
      - "--id"
      - "{{ item.pk | default(item.id) }}"
      - "--enable-after-install"
      - "{{ (gnome_extensions_enable_after_install | default(false)) | ternary('true','false') }}"
  register: gnome_extensions_install_outcomes
  changed_when: "'\"installed_now\": true' in (gnome_extensions_install_outcomes.stdout | default(''))"
  failed_when: gnome_extensions_install_outcomes.rc != 0
  when:
    - (item.pk is defined) or (item.id is defined)
  loop: "{{ gnome_extensions_install_list | default([]) }}"
  loop_control:
    label: "pk={{ item.pk | default(item.id) }}"


- name: Summary reminder (Wayland re-login)
  ansible.builtin.debug:
    msg: "If using Wayland, logout/login to register newly installed extensions before enabling."
